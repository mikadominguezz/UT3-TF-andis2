# Scripts de prueba para Mini E-commerce (curl)

# 1. Health Check
curl -X GET http://localhost:8080/health

# 2. Login Alice (usuario regular)
curl -X POST http://localhost:8080/login \
  -H "Content-Type: application/json" \
  -d '{"username":"alice","password":"alicepass"}'

# 3. Login Bob (admin)
curl -X POST http://localhost:8080/login \
  -H "Content-Type: application/json" \
  -d '{"username":"bob","password":"bobpass"}'

# 4. Obtener todos los productos (requiere token de Alice o Bob)
curl -X GET http://localhost:8080/products \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"

# 5. Crear un producto (requiere token de Bob - admin)
curl -X POST http://localhost:8080/products \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer BOB_TOKEN_HERE" \
  -d '{"name":"Producto C","price":300}'

# 6. Modificar un producto (requiere token de Bob - admin)
curl -X PUT http://localhost:8080/products/1 \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer BOB_TOKEN_HERE" \
  -d '{"name":"Producto Modificado","price":350}'

# 7. Obtener todos los clientes (requiere token de Bob - admin)
curl -X GET http://localhost:8080/clients \
  -H "Authorization: Bearer BOB_TOKEN_HERE"

# 8. Crear un cliente (requiere token de Bob - admin)
curl -X POST http://localhost:8080/clients \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer BOB_TOKEN_HERE" \
  -d '{"name":"Cliente Tres"}'

# 9. Crear una orden (requiere token de Alice - cliente, NO admin)  
curl -X POST http://localhost:8080/orders \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer ALICE_TOKEN_HERE" \
  -d '{"clientId":1,"productIds":[1,2]}'

# 10. Obtener todas las 칩rdenes (requiere token de Bob - admin)
curl -X GET http://localhost:8080/orders \
  -H "Authorization: Bearer BOB_TOKEN_HERE"

# EJEMPLO COMPLETO DE FLUJO:
# 1. Login como Bob
TOKEN=$(curl -s -X POST http://localhost:8080/login \
  -H "Content-Type: application/json" \
  -d '{"username":"bob","password":"bobpass"}' | \
  grep -o '"token":"[^"]*"' | cut -d'"' -f4)

# 2. Ver 칩rdenes existentes
curl -X GET http://localhost:8080/orders \
  -H "Authorization: Bearer $TOKEN"

# 3. Ver clientes disponibles
curl -X GET http://localhost:8080/clients \
  -H "Authorization: Bearer $TOKEN"

# 4. Ver productos disponibles
curl -X GET http://localhost:8080/products \
  -H "Authorization: Bearer $TOKEN"

# 5. Crear nueva orden (como cliente Alice)
ALICE_TOKEN=$(curl -s -X POST http://localhost:8080/login \
  -H "Content-Type: application/json" \
  -d '{"username":"alice","password":"alicepass"}' | \
  grep -o '"token":"[^"]*"' | cut -d'"' -f4)

curl -X POST http://localhost:8080/orders \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $ALICE_TOKEN" \
  -d '{"clientId":1,"productIds":[1,2]}'

# 6. Probar que Bob (admin) NO puede crear 칩rdenes
curl -X POST http://localhost:8080/orders \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{"clientId":1,"productIds":[1,2]}'

# 11. Recurso protegido (requiere cualquier token v치lido)
curl -X GET http://localhost:8080/protected \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"

# 12. Recurso solo para admins (requiere token de Bob)
curl -X GET http://localhost:8080/admin-only \
  -H "Authorization: Bearer BOB_TOKEN_HERE"
